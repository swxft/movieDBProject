"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var MissingTranslationError = /** @class */ (function (_super) {
    tslib_1.__extends(MissingTranslationError, _super);
    function MissingTranslationError(key, locale) {
        return _super.call(this, "Missing translation for key: " + key + " in locale: " + locale) || this;
    }
    return MissingTranslationError;
}(Error));
exports.MissingTranslationError = MissingTranslationError;
var MissingReplacementError = /** @class */ (function (_super) {
    tslib_1.__extends(MissingReplacementError, _super);
    function MissingReplacementError(replacement, replacements) {
        if (replacements === void 0) { replacements = {}; }
        var _this = this;
        var errorMessage = '';
        var replacementKeys = Object.keys(replacements);
        if (replacementKeys.length < 1) {
            errorMessage = "No replacement found for key '" + replacement + "' (and no replacements were passed in).";
        }
        else {
            errorMessage = "No replacement found for key '" + replacement + "'. The following replacements were passed: " + replacementKeys
                .map(function (key) { return "'" + key + "'"; })
                .join(', ');
        }
        _this = _super.call(this, errorMessage) || this;
        return _this;
    }
    return MissingReplacementError;
}(Error));
exports.MissingReplacementError = MissingReplacementError;
var MissingCurrencyCodeError = /** @class */ (function (_super) {
    tslib_1.__extends(MissingCurrencyCodeError, _super);
    function MissingCurrencyCodeError(additionalMessage) {
        if (additionalMessage === void 0) { additionalMessage = ''; }
        var _this = this;
        var baseErrorMessage = 'No currency code provided.';
        _this = _super.call(this, additionalMessage === ''
            ? baseErrorMessage
            : baseErrorMessage + " " + additionalMessage) || this;
        return _this;
    }
    return MissingCurrencyCodeError;
}(Error));
exports.MissingCurrencyCodeError = MissingCurrencyCodeError;
var MissingCountryError = /** @class */ (function (_super) {
    tslib_1.__extends(MissingCountryError, _super);
    function MissingCountryError(additionalMessage) {
        if (additionalMessage === void 0) { additionalMessage = ''; }
        var _this = this;
        var baseErrorMessage = 'No country code provided.';
        _this = _super.call(this, additionalMessage === ''
            ? baseErrorMessage
            : baseErrorMessage + " " + additionalMessage) || this;
        return _this;
    }
    return MissingCountryError;
}(Error));
exports.MissingCountryError = MissingCountryError;
