"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var I18nManager = /** @class */ (function () {
    function I18nManager(details, initialTranslations) {
        var e_1, _a;
        if (initialTranslations === void 0) { initialTranslations = {}; }
        this.details = details;
        this.translationGetters = new Map();
        this.fallbacks = new Map();
        this.translations = new Map();
        this.asyncTranslationIds = new Set();
        this.subscriptions = new Map();
        this.translationPromises = new Map();
        this.idsToUpdate = new Set();
        try {
            for (var _b = tslib_1.__values(Object.entries(initialTranslations)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = tslib_1.__read(_c.value, 2), id = _d[0], translation = _d[1];
                this.translations.set(id, translation);
                this.asyncTranslationIds.add(id);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    Object.defineProperty(I18nManager.prototype, "loading", {
        get: function () {
            return this.translationPromises.size > 0;
        },
        enumerable: true,
        configurable: true
    });
    I18nManager.prototype.resolve = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(tslib_1.__spread(this.translationPromises.values()))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    I18nManager.prototype.extract = function () {
        var _this = this;
        return tslib_1.__spread(this.asyncTranslationIds).reduce(function (extracted, id) {
            var _a;
            return (tslib_1.__assign(tslib_1.__assign({}, extracted), (_a = {}, _a[id] = _this.translations.get(id), _a)));
        }, {});
    };
    I18nManager.prototype.register = function (_a) {
        var id = _a.id, translations = _a.translations, fallback = _a.fallback;
        if (!this.fallbacks.has(id)) {
            this.fallbacks.set(id, fallback);
        }
        if (this.details.fallbackLocale != null && fallback != null) {
            var translationId = getTranslationId(id, this.details.fallbackLocale);
            if (!this.translations.has(translationId)) {
                this.translations.set(translationId, fallback);
            }
        }
        if (this.translationGetters.has(id)) {
            return;
        }
        var translationGetter = translations
            ? normalizeTranslationGetter(translations)
            : noop;
        this.setTranslations(id, translationGetter);
    };
    I18nManager.prototype.state = function (ids) {
        var _this = this;
        var _a = this.details, locale = _a.locale, fallbackLocale = _a.fallbackLocale;
        var possibleLocales = getPossibleLocales(locale);
        var omitFallbacks = fallbackLocale != null && possibleLocales.includes(fallbackLocale);
        var loading = false;
        var hasUnresolvedTranslations = false;
        var translations = ids.reduce(function (otherTranslations, id) {
            var e_2, _a;
            var translationsForId = [];
            try {
                for (var possibleLocales_1 = tslib_1.__values(possibleLocales), possibleLocales_1_1 = possibleLocales_1.next(); !possibleLocales_1_1.done; possibleLocales_1_1 = possibleLocales_1.next()) {
                    var locale_1 = possibleLocales_1_1.value;
                    var translationId = getTranslationId(id, locale_1);
                    var translation = _this.translations.get(translationId);
                    if (translation == null) {
                        if (_this.translationPromises.has(translationId)) {
                            hasUnresolvedTranslations = true;
                        }
                    }
                    else {
                        translationsForId.push(translation);
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (possibleLocales_1_1 && !possibleLocales_1_1.done && (_a = possibleLocales_1.return)) _a.call(possibleLocales_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            if (translationsForId.length === 0 && hasUnresolvedTranslations) {
                loading = true;
            }
            if (!omitFallbacks) {
                var fallback = _this.fallbacks.get(id);
                if (fallback != null) {
                    translationsForId.push(fallback);
                }
            }
            return tslib_1.__spread(otherTranslations, translationsForId);
        }, []);
        return { loading: loading, translations: translations };
    };
    I18nManager.prototype.subscribe = function (ids, subscriber) {
        var _this = this;
        this.subscriptions.set(subscriber, ids);
        return function () {
            _this.subscriptions.delete(subscriber);
        };
    };
    I18nManager.prototype.update = function (details) {
        var e_3, _a, e_4, _b;
        this.details = details;
        try {
            for (var _c = tslib_1.__values(this.translationGetters), _d = _c.next(); !_d.done; _d = _c.next()) {
                var _e = tslib_1.__read(_d.value, 2), id = _e[0], translationGetter = _e[1];
                this.setTranslations(id, translationGetter);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_3) throw e_3.error; }
        }
        try {
            for (var _f = tslib_1.__values(this.subscriptions), _g = _f.next(); !_g.done; _g = _f.next()) {
                var _h = tslib_1.__read(_g.value, 2), subscriber = _h[0], ids = _h[1];
                subscriber(this.state(ids), this.details);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
            }
            finally { if (e_4) throw e_4.error; }
        }
    };
    I18nManager.prototype.setTranslations = function (id, translationGetter) {
        var e_5, _a;
        var _this = this;
        this.translationGetters.set(id, translationGetter);
        var _loop_1 = function (locale) {
            var translationId = getTranslationId(id, locale);
            if (this_1.translations.has(translationId)) {
                return "continue";
            }
            var translations = translationGetter(locale);
            if (isPromise(translations)) {
                var promise = translations
                    .then(function (result) {
                    _this.translationPromises.delete(translationId);
                    _this.translations.set(translationId, result);
                    _this.asyncTranslationIds.add(translationId);
                    if (result != null) {
                        _this.updateSubscribersForId(id);
                    }
                })
                    .catch(function () {
                    _this.translationPromises.delete(translationId);
                    _this.translations.set(translationId, undefined);
                    _this.asyncTranslationIds.add(translationId);
                });
                this_1.translationPromises.set(translationId, promise);
            }
            else {
                this_1.translations.set(translationId, translations);
            }
        };
        var this_1 = this;
        try {
            for (var _b = tslib_1.__values(getPossibleLocales(this.details.locale)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var locale = _c.value;
                _loop_1(locale);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_5) throw e_5.error; }
        }
    };
    I18nManager.prototype.updateSubscribersForId = function (id) {
        var _this = this;
        this.idsToUpdate.add(id);
        if (this.enqueuedUpdate != null) {
            return;
        }
        var isBrowser = typeof window !== 'undefined';
        var enqueue = isBrowser ? window.requestAnimationFrame : setImmediate;
        this.enqueuedUpdate = enqueue(function () {
            var e_6, _a;
            delete _this.enqueuedUpdate;
            var idsToUpdate = tslib_1.__spread(_this.idsToUpdate);
            _this.idsToUpdate.clear();
            try {
                for (var _b = tslib_1.__values(_this.subscriptions), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = tslib_1.__read(_c.value, 2), subscriber = _d[0], ids = _d[1];
                    if (ids.some(function (id) { return idsToUpdate.includes(id); })) {
                        subscriber(_this.state(ids), _this.details);
                    }
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_6) throw e_6.error; }
            }
        });
    };
    return I18nManager;
}());
exports.I18nManager = I18nManager;
function getPossibleLocales(locale) {
    var split = locale.split('-');
    return split.length > 1
        ? [split[0] + "-" + split[1].toUpperCase(), split[0]]
        : [locale];
}
function isPromise(maybePromise) {
    return maybePromise != null && maybePromise.then != null;
}
function getTranslationId(id, locale) {
    return id + "__" + locale;
}
function noop() {
    return undefined;
}
function normalizeTranslationGetter(translations) {
    return typeof translations === 'function'
        ? translations
        : function (locale) { return translations[locale]; };
}
