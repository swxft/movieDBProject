"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var shared_1 = require("./shared");
function fallbackTranslationsImport(template, _a) {
    var id = _a.id, fallbackLocale = _a.fallbackLocale;
    return template("import " + id + " from './" + shared_1.TRANSLATION_DIRECTORY_NAME + "/" + fallbackLocale + ".json';", {
        sourceType: 'module',
    })();
}
exports.fallbackTranslationsImport = fallbackTranslationsImport;
function translationsImport(template, _a) {
    var id = _a.id;
    return template("import " + id + " from './" + shared_1.TRANSLATION_DIRECTORY_NAME + "';", {
        sourceType: 'module',
    })();
}
exports.translationsImport = translationsImport;
function i18nCallExpression(template, _a) {
    var id = _a.id, fallbackID = _a.fallbackID, translationArrayID = _a.translationArrayID, bindingName = _a.bindingName, translationFilePaths = _a.translationFilePaths, fallbackLocale = _a.fallbackLocale;
    var translationArrayString = translationArrayID
        ? translationArrayID
        : shared_1.toArrayString(shared_1.getLocaleIds({
            translationFilePaths: translationFilePaths,
            fallbackLocale: fallbackLocale,
        }));
    return template(bindingName + "({\n        id: '" + id + "',\n        fallback: " + fallbackID + ",\n        translations(locale) {\n          if (" + translationArrayString + ".indexOf(locale) < 0) {\n            return;\n          }\n          return (async () => {\n            const dictionary = await import(/* webpackChunkName: \"" + id + "-i18n\", webpackMode: \"lazy-once\" */ `./" + shared_1.TRANSLATION_DIRECTORY_NAME + "/${locale}.json`);\n            return dictionary && dictionary.default;\n          })();\n        },\n      })", {
        sourceType: 'module',
        plugins: ['dynamicImport'],
        preserveComments: true,
    })();
}
exports.i18nCallExpression = i18nCallExpression;
function i18nGeneratedDictionaryCallExpression(template, _a) {
    var id = _a.id, translationsID = _a.translationsID, bindingName = _a.bindingName;
    return template(bindingName + "({\n        id: '" + id + "',\n        fallback: Object.values(" + translationsID + ")[0],\n        translations(locale) {\n          return Promise.resolve(" + translationsID + "[locale]);\n        },\n      })", {
        sourceType: 'module',
        plugins: ['dynamicImport'],
        preserveComments: true,
    })();
}
exports.i18nGeneratedDictionaryCallExpression = i18nGeneratedDictionaryCallExpression;
