"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var path_1 = tslib_1.__importDefault(require("path"));
var glob_1 = tslib_1.__importDefault(require("glob"));
var string_hash_1 = tslib_1.__importDefault(require("string-hash"));
var change_case_1 = require("change-case");
var babel_templates_1 = require("./babel-templates");
var shared_1 = require("./shared");
exports.I18N_CALL_NAMES = ['useI18n', 'withI18n'];
function injectWithI18nArguments(_a) {
    var t = _a.types, template = _a.template;
    function addI18nArguments(_a) {
        var binding = _a.binding, bindingName = _a.bindingName, filename = _a.filename, insertImport = _a.insertImport, rewritei18nCall = _a.rewritei18nCall;
        var referencePaths = binding.referencePaths;
        var referencePathsToRewrite = referencePaths.filter(function (referencePath) {
            var parent = referencePath.parent;
            return (parent.type === 'CallExpression' &&
                (!parent.arguments || parent.arguments.length === 0));
        });
        if (referencePathsToRewrite.length === 0) {
            return;
        }
        if (referencePathsToRewrite.length > 1) {
            throw new Error("You attempted to use " + bindingName + " " + referencePathsToRewrite.length + " times in a single file. This is not supported by the Babel plugin that automatically inserts translations.");
        }
        var translationFilePaths = getTranslationFilePaths(filename, shared_1.TRANSLATION_DIRECTORY_NAME);
        if (translationFilePaths.length === 0) {
            return;
        }
        insertImport();
        rewritei18nCall(referencePathsToRewrite[0], translationFilePaths);
    }
    return {
        visitor: {
            Program: function (nodePath, state) {
                state.program = nodePath;
            },
            ImportDeclaration: function (nodePath, state) {
                var _this = this;
                if (nodePath.node.source.value !== '@shopify/react-i18n') {
                    return;
                }
                var specifiers = nodePath.node.specifiers;
                specifiers.forEach(function (specifier) {
                    if (!t.isImportSpecifier(specifier) ||
                        !exports.I18N_CALL_NAMES.includes(specifier.imported.name)) {
                        return;
                    }
                    var bindingName = specifier.local.name;
                    var binding = nodePath.scope.getBinding(bindingName);
                    if (!binding) {
                        return;
                    }
                    var _a = state.opts, mode = _a.mode, defaultLocale = _a.defaultLocale;
                    var fallbackLocale = defaultLocale
                        ? defaultLocale
                        : shared_1.DEFAULT_FALLBACK_LOCALE;
                    var fallbackID = nodePath.scope.generateUidIdentifier(change_case_1.camelCase(fallbackLocale)).name;
                    var filename = _this.file.opts.filename;
                    if (mode === 'from-dictionary-index') {
                        var translationArrayID_1 = '__shopify__i18n_translations';
                        addI18nArguments({
                            binding: binding,
                            bindingName: bindingName,
                            filename: filename,
                            insertImport: function () {
                                var program = state.program;
                                program.node.body.unshift(babel_templates_1.translationsImport(template, {
                                    id: translationArrayID_1,
                                }));
                            },
                            rewritei18nCall: function (referencePathToRewrite) {
                                referencePathToRewrite.parentPath.replaceWith(babel_templates_1.i18nGeneratedDictionaryCallExpression(template, {
                                    id: generateID(filename),
                                    translationsID: translationArrayID_1,
                                    bindingName: bindingName,
                                }));
                            },
                        });
                        return;
                    }
                    var fromGeneratedIndex = mode === 'from-generated-index';
                    var translationArrayID = fromGeneratedIndex
                        ? '__shopify__i18n_translations'
                        : undefined;
                    addI18nArguments({
                        binding: binding,
                        bindingName: bindingName,
                        filename: filename,
                        insertImport: function () {
                            var program = state.program;
                            program.node.body.unshift(babel_templates_1.fallbackTranslationsImport(template, {
                                id: fallbackID,
                                fallbackLocale: fallbackLocale,
                            }));
                            if (fromGeneratedIndex) {
                                program.node.body.unshift(babel_templates_1.translationsImport(template, {
                                    id: translationArrayID,
                                }));
                            }
                        },
                        rewritei18nCall: function (referencePathToRewrite, translationFilePaths) {
                            referencePathToRewrite.parentPath.replaceWith(babel_templates_1.i18nCallExpression(template, {
                                id: generateID(filename),
                                fallbackID: fallbackID,
                                translationArrayID: translationArrayID,
                                bindingName: bindingName,
                                translationFilePaths: translationFilePaths,
                                fallbackLocale: fallbackLocale,
                            }));
                        },
                    });
                });
            },
        },
    };
}
exports.default = injectWithI18nArguments;
function getTranslationFilePaths(filename, translationDirName) {
    return glob_1.default.sync(path_1.default.resolve(path_1.default.dirname(filename), translationDirName, '*.json'), {
        nodir: true,
    });
}
// based on postcss-modules implementation
// see https://github.com/css-modules/postcss-modules/blob/60920a97b165885683c41655e4ca594d15ec2aa0/src/generateScopedName.js
function generateID(filename) {
    var hash = string_hash_1.default(filename).toString(36).substr(0, 5);
    var extension = path_1.default.extname(filename);
    var legible = path_1.default.basename(filename, extension);
    return legible + "_" + hash;
}
