"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var path_1 = require("path");
var fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
var lodash_clonedeep_1 = tslib_1.__importDefault(require("lodash.clonedeep"));
var lodash_merge_1 = tslib_1.__importDefault(require("lodash.merge"));
var shared_1 = require("./shared");
function generateTranslationDictionaries(locales, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.fallbackLocale, fallbackLocale = _c === void 0 ? shared_1.DEFAULT_FALLBACK_LOCALE : _c, _d = _b.rootDir, rootDir = _d === void 0 ? process.cwd() : _d;
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var translationBuckets;
        var _this = this;
        return tslib_1.__generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    if (!locales || locales.length === 0) {
                        throw new Error('generateTranslationDictionary must be called with at least one locale.');
                    }
                    translationBuckets = shared_1.findTranslationBuckets(rootDir);
                    return [4 /*yield*/, Promise.all(Object.entries(translationBuckets).map(function (_a) {
                            var _b = tslib_1.__read(_a, 2), translationsDir = _b[0], translationFilePaths = _b[1];
                            return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                var fallbackTranslations, dictionary, contentStr;
                                var _this = this;
                                return tslib_1.__generator(this, function (_c) {
                                    switch (_c.label) {
                                        case 0: return [4 /*yield*/, readLocaleTranslations(fallbackLocale, translationFilePaths)];
                                        case 1:
                                            fallbackTranslations = _c.sent();
                                            return [4 /*yield*/, locales.reduce(function (accPromise, locale) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                                    var localeTranslations, acc;
                                                    return tslib_1.__generator(this, function (_a) {
                                                        switch (_a.label) {
                                                            case 0: return [4 /*yield*/, readLocaleTranslations(locale, translationFilePaths)];
                                                            case 1:
                                                                localeTranslations = _a.sent();
                                                                return [4 /*yield*/, accPromise];
                                                            case 2:
                                                                acc = _a.sent();
                                                                acc[locale] = lodash_merge_1.default(lodash_clonedeep_1.default(fallbackTranslations), localeTranslations);
                                                                return [2 /*return*/, acc];
                                                        }
                                                    });
                                                }); }, {})];
                                        case 2:
                                            dictionary = _c.sent();
                                            contentStr = JSON.stringify(dictionary);
                                            // Writing the content out as a JSON.parse-wrapped string seems
                                            // counter-intuitive, but browsers can parse this faster than they
                                            // can parse JavaScript ‾\_(ツ)_/‾
                                            // https://www.youtube.com/watch?v=ff4fgQxPaO0
                                            return [4 /*yield*/, fs_extra_1.default.writeFile(path_1.join(translationsDir, 'index.js'), "export default JSON.parse(" + JSON.stringify(contentStr) + ")")];
                                        case 3:
                                            // Writing the content out as a JSON.parse-wrapped string seems
                                            // counter-intuitive, but browsers can parse this faster than they
                                            // can parse JavaScript ‾\_(ツ)_/‾
                                            // https://www.youtube.com/watch?v=ff4fgQxPaO0
                                            _c.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            });
                        }))];
                case 1:
                    _e.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.generateTranslationDictionaries = generateTranslationDictionaries;
function readLocaleTranslations(locale, translationFilePaths) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var translationPath;
        return tslib_1.__generator(this, function (_a) {
            translationPath = translationFilePaths.find(function (filePath) {
                return filePath.endsWith("/" + locale + ".json");
            });
            return [2 /*return*/, translationPath ? fs_extra_1.default.readJson(translationPath) : {}];
        });
    });
}
