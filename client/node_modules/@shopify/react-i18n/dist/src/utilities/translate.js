"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var function_enhancers_1 = require("@shopify/function-enhancers");
var i18n_1 = require("@shopify/i18n");
var errors_1 = require("../errors");
var REPLACE_REGEX = /{([^}]*)}/g;
var MISSING_TRANSLATION = Symbol('Missing translation');
var PLURALIZATION_KEY_NAME = 'count';
var SEPARATOR = '.';
var numberFormats = new Map();
function memoizedNumberFormatter(locales, options) {
    var key = numberFormatCacheKey(locales, options);
    if (numberFormats.has(key)) {
        return numberFormats.get(key);
    }
    var i = new Intl.NumberFormat(locales, options);
    numberFormats.set(key, i);
    return i;
}
exports.memoizedNumberFormatter = memoizedNumberFormatter;
exports.PSEUDOTRANSLATE_OPTIONS = {
    startDelimiter: '{',
    endDelimiter: '}',
    prepend: '[!!',
    append: '!!]',
};
function numberFormatCacheKey(locales, options) {
    if (options === void 0) { options = {}; }
    var localeKey = Array.isArray(locales) ? locales.sort().join('-') : locales;
    return localeKey + "-" + JSON.stringify(options);
}
exports.numberFormatCacheKey = numberFormatCacheKey;
function pluralRules(locale, options) {
    if (options === void 0) { options = {}; }
    return new Intl.PluralRules(locale, options);
}
exports.memoizedPluralRules = function_enhancers_1.memoize(pluralRules, function (locale, options) {
    if (options === void 0) { options = {}; }
    return "" + locale + JSON.stringify(options);
});
function getTranslationTree(id, translations, locale, replacements) {
    var e_1, _a, e_2, _b;
    var normalizedTranslations = Array.isArray(translations)
        ? translations
        : [translations];
    var result;
    try {
        for (var normalizedTranslations_1 = tslib_1.__values(normalizedTranslations), normalizedTranslations_1_1 = normalizedTranslations_1.next(); !normalizedTranslations_1_1.done; normalizedTranslations_1_1 = normalizedTranslations_1.next()) {
            var translationDictionary = normalizedTranslations_1_1.value;
            result = translationDictionary;
            try {
                for (var _c = (e_2 = void 0, tslib_1.__values(id.split(SEPARATOR))), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var part = _d.value;
                    result = result[part];
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                }
                finally { if (e_2) throw e_2.error; }
            }
            if (result) {
                if (replacements) {
                    return typeof result === 'string'
                        ? updateStringWithReplacements(result, replacements)
                        : updateTreeWithReplacements(result, locale, replacements);
                }
                return result;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (normalizedTranslations_1_1 && !normalizedTranslations_1_1.done && (_a = normalizedTranslations_1.return)) _a.call(normalizedTranslations_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    throw new errors_1.MissingTranslationError(id, locale);
}
exports.getTranslationTree = getTranslationTree;
function translate(id, options, translations, locale) {
    var e_3, _a;
    var scope = options.scope, replacements = options.replacements, pseudotranslate = options.pseudotranslate;
    var normalizedTranslations = Array.isArray(translations)
        ? translations
        : [translations];
    var normalizedId = normalizeIdentifier(id, scope);
    try {
        for (var normalizedTranslations_2 = tslib_1.__values(normalizedTranslations), normalizedTranslations_2_1 = normalizedTranslations_2.next(); !normalizedTranslations_2_1.done; normalizedTranslations_2_1 = normalizedTranslations_2.next()) {
            var translationDictionary = normalizedTranslations_2_1.value;
            var result = translateWithDictionary(normalizedId, translationDictionary, locale, replacements, { pseudotranslate: pseudotranslate });
            if (result !== MISSING_TRANSLATION) {
                return result;
            }
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (normalizedTranslations_2_1 && !normalizedTranslations_2_1.done && (_a = normalizedTranslations_2.return)) _a.call(normalizedTranslations_2);
        }
        finally { if (e_3) throw e_3.error; }
    }
    throw new errors_1.MissingTranslationError(normalizedId, locale);
}
exports.translate = translate;
function translateWithDictionary(id, translations, locale, replacements, _a) {
    var e_4, _b;
    var _c = (_a === void 0 ? {} : _a).pseudotranslate, pseudotranslate = _c === void 0 ? false : _c;
    var result = translations;
    try {
        for (var _d = tslib_1.__values(id.split(SEPARATOR)), _e = _d.next(); !_e.done; _e = _d.next()) {
            var part = _e.value;
            if (result == null || typeof result !== 'object') {
                return MISSING_TRANSLATION;
            }
            result = result[part];
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
        }
        finally { if (e_4) throw e_4.error; }
    }
    var additionalReplacements = {};
    if (typeof result === 'object' &&
        replacements != null &&
        Object.prototype.hasOwnProperty.call(replacements, PLURALIZATION_KEY_NAME)) {
        var count = replacements[PLURALIZATION_KEY_NAME];
        if (typeof count === 'number') {
            var group = exports.memoizedPluralRules(locale).select(count);
            result = result[group];
            additionalReplacements[PLURALIZATION_KEY_NAME] = memoizedNumberFormatter(locale).format(count);
        }
    }
    var processedString = typeof result === 'string' && pseudotranslate
        ? i18n_1.pseudotranslate(result, tslib_1.__assign(tslib_1.__assign({}, exports.PSEUDOTRANSLATE_OPTIONS), { toLocale: typeof pseudotranslate === 'boolean' ? undefined : pseudotranslate }))
        : result;
    if (typeof processedString === 'string') {
        return updateStringWithReplacements(processedString, tslib_1.__assign(tslib_1.__assign({}, replacements), additionalReplacements));
    }
    else {
        return MISSING_TRANSLATION;
    }
}
function updateStringWithReplacements(str, replacements) {
    if (replacements === void 0) { replacements = {}; }
    var replaceFinder = /([^{]*)({([^}]*)})?/g;
    var allReplacementsArePrimitives = Object.keys(replacements).every(function (key) { return typeof replacements[key] !== 'object'; });
    if (allReplacementsArePrimitives) {
        return str.replace(REPLACE_REGEX, function (match) {
            var replacement = match.substring(1, match.length - 1);
            if (!Object.prototype.hasOwnProperty.call(replacements, replacement)) {
                throw new errors_1.MissingReplacementError(replacement, replacements);
            }
            return replacements[replacement];
        });
    }
    else {
        var pieces = [];
        var match = replaceFinder.exec(str);
        var matchIndex = 0;
        while (match) {
            var regularText = match[1];
            var replacement = match[3];
            if (match.index >= str.length) {
                break;
            }
            if (regularText) {
                pieces.push(regularText);
            }
            if (replacement) {
                if (!Object.prototype.hasOwnProperty.call(replacements, replacement)) {
                    throw new errors_1.MissingReplacementError(replacement, replacements);
                }
                matchIndex += 1;
                var finalReplacement = react_1.default.isValidElement(replacements[replacement])
                    ? react_1.default.cloneElement(replacements[replacement], { key: matchIndex })
                    : replacements[replacement];
                pieces.push(finalReplacement);
            }
            match = replaceFinder.exec(str);
        }
        replaceFinder.lastIndex = 0;
        return pieces;
    }
}
function normalizeIdentifier(id, scope) {
    if (scope == null) {
        return id;
    }
    return "" + (typeof scope === 'string' ? scope : scope.join(SEPARATOR)) + SEPARATOR + id;
}
function updateTreeWithReplacements(translationTree, locale, replacements) {
    if (Object.prototype.hasOwnProperty.call(replacements, PLURALIZATION_KEY_NAME)) {
        var count = replacements[PLURALIZATION_KEY_NAME];
        if (typeof count === 'number') {
            var group = exports.memoizedPluralRules(locale).select(count);
            if (typeof translationTree[group] === 'string') {
                return updateStringWithReplacements(translationTree[group], tslib_1.__assign(tslib_1.__assign({}, replacements), { PLURALIZATION_KEY_NAME: memoizedNumberFormatter(locale).format(count) }));
            }
        }
    }
    return Object.keys(translationTree).reduce(function (acc, key) {
        var _a;
        return (tslib_1.__assign(tslib_1.__assign({}, acc), (_a = {}, _a[key] = typeof translationTree[key] === 'string'
            ? updateStringWithReplacements(translationTree[key], replacements)
            : updateTreeWithReplacements(translationTree[key], locale, replacements), _a)));
    }, {});
}
