"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var decorators_1 = require("@shopify/decorators");
var utilities_1 = require("./utilities");
var sanitise_date_string_1 = require("./sanitise-date-string");
var TWO_DIGIT_REGEX = /(\d{2})/;
function getDateTimeParts(date, timeZone) {
    return {
        year: function () { return DateTimeParts.getYear(date, timeZone); },
        month: function () { return DateTimeParts.getMonth(date, timeZone); },
        day: function () { return DateTimeParts.getDay(date, timeZone); },
        weekday: function () { return DateTimeParts.getWeekday(date, timeZone); },
        hour: function () { return DateTimeParts.getHour(date, timeZone); },
        minute: function () { return DateTimeParts.getMinute(date, timeZone); },
        second: function () { return DateTimeParts.getSecond(date, timeZone); },
    };
}
exports.getDateTimeParts = getDateTimeParts;
function dateTimeCacheKey(unit) {
    return function (date, timeZone) {
        return unit + "-" + date.toString() + "-" + timeZone;
    };
}
var Weekday;
(function (Weekday) {
    Weekday["Monday"] = "Monday";
    Weekday["Tuesday"] = "Tuesday";
    Weekday["Wednesday"] = "Wednesday";
    Weekday["Thursday"] = "Thursday";
    Weekday["Friday"] = "Friday";
    Weekday["Saturday"] = "Saturday";
    Weekday["Sunday"] = "Sunday";
})(Weekday || (Weekday = {}));
var weekdays = {
    Monday: 0,
    Tuesday: 1,
    Wednesday: 2,
    Thursday: 3,
    Friday: 4,
    Saturday: 5,
    Sunday: 6,
};
function isWeekday(weekday) {
    return Object.keys(weekdays).some(function (key) { return key === weekday; });
}
function assertNever(message) {
    throw new Error(message);
}
function getWeekdayValue(weekday) {
    if (!isWeekday(weekday)) {
        return assertNever("Unexpected weekday: " + weekday);
    }
    return weekdays[weekday];
}
// eslint-disable-next-line @typescript-eslint/no-extraneous-class
var DateTimeParts = /** @class */ (function () {
    function DateTimeParts() {
    }
    DateTimeParts.getYear = function (date, timeZone) {
        if (isNaN(date.valueOf())) {
            throw new Error("Unable to parse date: " + date + " for timezone: " + timeZone);
        }
        var yearString = utilities_1.formatDate(date, 'en', {
            timeZone: timeZone,
            year: 'numeric',
        });
        var sanitisedYearString = sanitise_date_string_1.sanitiseDateString(yearString);
        var year = parseInt(sanitisedYearString, 10);
        if (isNaN(year)) {
            throw new Error("Unable to parse year: '" + yearString + "'");
        }
        return year;
    };
    DateTimeParts.getMonth = function (date, timeZone) {
        var monthString = utilities_1.formatDate(date, 'en', {
            timeZone: timeZone,
            month: 'numeric',
        });
        var sanitisedMonthString = sanitise_date_string_1.sanitiseDateString(monthString);
        var month = parseInt(sanitisedMonthString, 10);
        if (isNaN(month)) {
            throw new Error("Unable to parse month: '" + monthString + "'");
        }
        return month;
    };
    DateTimeParts.getDay = function (date, timeZone) {
        var dayString = utilities_1.formatDate(date, 'en', {
            timeZone: timeZone,
            day: 'numeric',
        });
        var sanitisedDayString = sanitise_date_string_1.sanitiseDateString(dayString);
        var day = parseInt(sanitisedDayString, 10);
        if (isNaN(day)) {
            throw new Error("Unable to parse day: '" + dayString + "'");
        }
        return day;
    };
    DateTimeParts.getWeekday = function (date, timeZone) {
        var weekdayString = utilities_1.formatDate(date, 'en', {
            timeZone: timeZone,
            weekday: 'long',
        });
        var sanitisedWeekdayString = sanitise_date_string_1.sanitiseDateString(weekdayString);
        return getWeekdayValue(sanitisedWeekdayString);
    };
    DateTimeParts.getHour = function (date, timeZone) {
        var hourString = utilities_1.formatDate(date, 'en', {
            timeZone: timeZone,
            hour12: false,
            hour: 'numeric',
        });
        var hour = parseInt(hourString, 10);
        if (isNaN(hour)) {
            hour = DateTimeParts.getTimePartsFallback(date, timeZone).hour;
        }
        return hour;
    };
    DateTimeParts.getMinute = function (date, timeZone) {
        var minuteString = utilities_1.formatDate(date, 'en', {
            timeZone: timeZone,
            minute: 'numeric',
        });
        var minute = parseInt(minuteString, 10);
        if (isNaN(minute)) {
            minute = DateTimeParts.getTimePartsFallback(date, timeZone).minute;
        }
        return minute;
    };
    DateTimeParts.getSecond = function (date, timeZone) {
        var secondString = utilities_1.formatDate(date, 'en', {
            timeZone: timeZone,
            second: 'numeric',
        });
        var second = parseInt(secondString, 10);
        if (isNaN(second)) {
            second = DateTimeParts.getTimePartsFallback(date, timeZone).second;
        }
        return second;
    };
    DateTimeParts.getTimePartsFallback = function (date, timeZone) {
        var timeString = utilities_1.formatDate(date, 'en', {
            timeZone: timeZone,
            hour12: false,
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
        });
        // In Microsoft Edge, Intl.DateTimeFormat returns invisible characters around the individual numbers
        var _a = tslib_1.__read(timeString.split(':'), 3), dirtyHour = _a[0], dirtyMinute = _a[1], dirtySecond = _a[2];
        var rawHour = new RegExp(TWO_DIGIT_REGEX).exec(dirtyHour);
        var rawMinute = new RegExp(TWO_DIGIT_REGEX).exec(dirtyMinute);
        var rawSecond = new RegExp(TWO_DIGIT_REGEX).exec(dirtySecond);
        if (rawHour != null && rawMinute != null && rawSecond != null) {
            var hour = parseInt(rawHour[1], 10);
            var minute = parseInt(rawMinute[1], 10);
            var second = parseInt(rawSecond[1], 10);
            return {
                hour: hour,
                minute: minute,
                second: second,
            };
        }
        throw new Error("Unable to parse timeString: '" + timeString + "'");
    };
    tslib_1.__decorate([
        decorators_1.memoize(dateTimeCacheKey('year'))
    ], DateTimeParts, "getYear", null);
    tslib_1.__decorate([
        decorators_1.memoize(dateTimeCacheKey('month'))
    ], DateTimeParts, "getMonth", null);
    tslib_1.__decorate([
        decorators_1.memoize(dateTimeCacheKey('day'))
    ], DateTimeParts, "getDay", null);
    tslib_1.__decorate([
        decorators_1.memoize(dateTimeCacheKey('weekday'))
    ], DateTimeParts, "getWeekday", null);
    tslib_1.__decorate([
        decorators_1.memoize(dateTimeCacheKey('hour'))
    ], DateTimeParts, "getHour", null);
    tslib_1.__decorate([
        decorators_1.memoize(dateTimeCacheKey('minute'))
    ], DateTimeParts, "getMinute", null);
    tslib_1.__decorate([
        decorators_1.memoize(dateTimeCacheKey('second'))
    ], DateTimeParts, "getSecond", null);
    tslib_1.__decorate([
        decorators_1.memoize(dateTimeCacheKey('timePartsFallback'))
    ], DateTimeParts, "getTimePartsFallback", null);
    return DateTimeParts;
}());
