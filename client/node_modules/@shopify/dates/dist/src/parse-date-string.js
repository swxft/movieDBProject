"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var apply_time_zone_offset_1 = require("./apply-time-zone-offset");
var parse_date_string_parts_1 = require("./parse-date-string-parts");
function parseDateString(dateString, timeZone) {
    var dateTimeParts = parse_date_string_parts_1.parseDateStringParts(dateString);
    if (dateTimeParts == null) {
        return null;
    }
    var rawYear = dateTimeParts.year, rawMonth = dateTimeParts.month, rawDay = dateTimeParts.day, rawHour = dateTimeParts.hour, rawMinute = dateTimeParts.minute, rawSecond = dateTimeParts.second, rawMillisecond = dateTimeParts.millisecond, timeZoneOffset = dateTimeParts.timeZoneOffset, sign = dateTimeParts.sign, rawTimeZoneHour = dateTimeParts.timeZoneHour, rawTimeZoneMinute = dateTimeParts.timeZoneMinute;
    var year = parseInt(rawYear, 10);
    var month = parseInt(rawMonth, 10);
    var day = parseInt(rawDay, 10);
    var hour = rawHour == null ? 0 : parseInt(rawHour, 10);
    var minute = rawMinute == null ? 0 : parseInt(rawMinute, 10);
    var second = rawSecond == null ? 0 : parseInt(rawSecond, 10);
    var millisecond = rawMillisecond == null ? 0 : parseInt(rawMillisecond, 10);
    var timeZoneHour = rawTimeZoneHour == null ? 0 : parseInt(rawTimeZoneHour, 10);
    var timeZoneMinute = rawTimeZoneMinute == null ? 0 : parseInt(rawTimeZoneMinute, 10);
    var utcDate = new Date(Date.UTC(year, month - 1, day, hour, minute, second, millisecond));
    if (timeZoneOffset === 'Z') {
        return utcDate;
    }
    if (sign == null) {
        return apply_time_zone_offset_1.applyTimeZoneOffset(utcDate, timeZone, 'UTC');
    }
    switch (sign) {
        case '+':
            utcDate.setHours(utcDate.getHours() - timeZoneHour);
            utcDate.setMinutes(utcDate.getMinutes() - timeZoneMinute);
            return utcDate;
        case '-':
            utcDate.setHours(utcDate.getHours() + timeZoneHour);
            utcDate.setMinutes(utcDate.getMinutes() + timeZoneMinute);
            return utcDate;
        default:
            return null;
    }
}
exports.parseDateString = parseDateString;
