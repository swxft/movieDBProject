"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toContainReactComponent = toContainReactComponent;
exports.toContainReactComponentTimes = toContainReactComponentTimes;

var _jestMatcherUtils = require("jest-matcher-utils");

var _utilities = require("./utilities");

function toContainReactComponent(node, type, props) {
  (0, _utilities.assertIsNode)(node, {
    expectation: 'toContainReactComponent',
    isNot: this.isNot
  });
  (0, _utilities.assertIsType)(type, {
    expectation: 'toContainReactComponent',
    isNot: this.isNot
  });
  const foundByType = node.findAll(type);
  const foundByProps = props == null ? foundByType : foundByType.filter(element => Object.keys(props).every(key => this.equals(props[key], element.props[key])));
  const pass = foundByProps.length > 0;
  const message = pass ? () => `${(0, _jestMatcherUtils.matcherHint)('.not.toContainReactComponent')}\n\n` + `Expected the React element:\n  ${(0, _jestMatcherUtils.RECEIVED_COLOR)(node.toString())}\n` + `Not to contain component:\n  ${(0, _jestMatcherUtils.EXPECTED_COLOR)((0, _utilities.printType)(type))}\n${props ? `With props matching:\n  ${(0, _jestMatcherUtils.printExpected)(props)}\n` : ''}` + `But ${foundByProps.length} matching ${(0, _utilities.printType)(type)} ${foundByProps.length === 1 ? 'elements were' : 'element was'} found.\n` : () => `${`${(0, _jestMatcherUtils.matcherHint)('.toContainReactComponent')}\n\n` + `Expected the React element:\n  ${(0, _jestMatcherUtils.RECEIVED_COLOR)(node.toString())}\n` + `To contain component:\n  ${(0, _jestMatcherUtils.EXPECTED_COLOR)((0, _utilities.printType)(type))}\n${props ? `With props matching:\n  ${(0, _jestMatcherUtils.printExpected)(props)}\n` : ''}`}${foundByType.length === 0 ? `But no matching ${(0, _utilities.printType)(type)} elements were found.\n` : `But the ${foundByType.length === 1 ? 'found element has' : 'found elements have'} the following prop differences:\n\n${(0, _utilities.diffs)(foundByType, props, this.expand)}`}`;
  return {
    pass,
    message
  };
}

function toContainReactComponentTimes(node, type, times, props) {
  (0, _utilities.assertIsNode)(node, {
    expectation: 'toContainReactComponentTimes',
    isNot: this.isNot
  });
  (0, _utilities.assertIsType)(type, {
    expectation: 'toContainReactComponent',
    isNot: this.isNot
  });
  const foundByType = node.findAll(type);
  const foundByProps = props == null ? foundByType : foundByType.filter(element => Object.keys(props).every(key => this.equals(props[key], element.props[key])));
  const pass = foundByProps.length === times;
  const message = pass ? () => [`${(0, _jestMatcherUtils.matcherHint)('.not.toContainReactComponentTimes')}\n`, `Expected the React element:\n  ${(0, _jestMatcherUtils.RECEIVED_COLOR)(node.toString())}`, `Not to contain component:\n  ${(0, _jestMatcherUtils.EXPECTED_COLOR)((0, _utilities.printType)(type))}`, `${times} ${(0, _utilities.pluralize)('time', times)}, but it did.`].join('\n') : () => [`${(0, _jestMatcherUtils.matcherHint)('.toContainReactComponentTimes')}\n`, `Expected the React element:\n  ${(0, _jestMatcherUtils.RECEIVED_COLOR)(node.toString())}`, `To contain component:\n  ${(0, _jestMatcherUtils.EXPECTED_COLOR)((0, _utilities.printType)(type))}`, `${times} ${(0, _utilities.pluralize)('time', times)}, but it was found ${foundByProps.length}.`].join('\n');
  return {
    pass,
    message
  };
}