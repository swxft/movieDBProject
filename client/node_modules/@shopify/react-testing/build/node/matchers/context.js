"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toProvideReactContext = toProvideReactContext;

var _jestMatcherUtils = require("jest-matcher-utils");

var _utilities = require("./utilities");

function toProvideReactContext(node, Context, value) {
  (0, _utilities.assertIsNode)(node, {
    expectation: 'toProvideReactContext',
    isNot: this.isNot
  });
  const foundByType = node.findAll(Context.Provider);
  const foundByValue = value == null ? foundByType : foundByType.filter(element => this.equals(value, element.prop('value')));
  const pass = foundByValue.length > 0;
  const message = pass ? () => `${(0, _jestMatcherUtils.matcherHint)('.not.toProvideReactContext')}\n\n` + `Expected the React element:\n  ${(0, _jestMatcherUtils.RECEIVED_COLOR)(node.toString())}\n` + `Not to contain context provider:\n  ${(0, _jestMatcherUtils.EXPECTED_COLOR)((0, _utilities.printType)(Context.Provider))}\n${value ? `With value matching:\n  ${(0, _jestMatcherUtils.printExpected)(value)}\n` : ''}` + `But ${foundByValue.length} matching ${(0, _utilities.printType)(Context.Provider)}${foundByValue.length === 1 ? 's were' : ' was'} found.\n` : () => `${`${(0, _jestMatcherUtils.matcherHint)('.toProvideReactContext')}\n\n` + `Expected the React element:\n  ${(0, _jestMatcherUtils.RECEIVED_COLOR)(node.toString())}\n` + `To contain context provider:\n  ${(0, _jestMatcherUtils.EXPECTED_COLOR)((0, _utilities.printType)(Context.Provider))}\n${value ? `With value matching:\n  ${(0, _jestMatcherUtils.printExpected)(value)}\n` : ''}`}${foundByType.length === 0 ? `But no matching ${(0, _utilities.printType)(Context.Provider)}s were found.\n` : `But the ${foundByType.length === 1 ? 'found provider has' : 'found provider have'} had different values:\n\n${(0, _utilities.diffs)(foundByType, {
    value
  }, this.expand)}`}`;
  return {
    pass,
    message
  };
}