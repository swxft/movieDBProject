"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toContainReactText = toContainReactText;
exports.toContainReactHtml = toContainReactHtml;

var _jestMatcherUtils = require("jest-matcher-utils");

var _utilities = require("./utilities");

function toContainReactText(node, text) {
  (0, _utilities.assertIsNode)(node, {
    expectation: 'toContainReactText',
    isNot: this.isNot
  });
  const nodeText = node.text();
  const matchIndex = nodeText.indexOf(text);
  const pass = matchIndex >= 0;
  const message = pass ? () => `${(0, _jestMatcherUtils.matcherHint)('.not.toContainReactText', node.toString())}\n\n` + `Expected the React element:\n  ${(0, _jestMatcherUtils.RECEIVED_COLOR)(node.toString())}\n` + `Not to contain text:\n  ${(0, _jestMatcherUtils.printExpected)(text)}\n` + `But it did:\n  ${printReceivedWithHighlight(nodeText, matchIndex, text.length)}\n` : () => `${(0, _jestMatcherUtils.matcherHint)('.not.toContainReactText', node.toString())}\n\n` + `Expected the React element:\n  ${(0, _jestMatcherUtils.RECEIVED_COLOR)(node.toString())}\n` + `With text content:\n  ${(0, _jestMatcherUtils.printReceived)(nodeText)}\n` + `To contain string:\n  ${(0, _jestMatcherUtils.printExpected)(text)}\n`;
  return {
    pass,
    message
  };
}

function toContainReactHtml(node, text) {
  (0, _utilities.assertIsNode)(node, {
    expectation: 'toContainReactHtml',
    isNot: this.isNot
  });
  const nodeHtml = node.html();
  const matchIndex = nodeHtml.indexOf(text);
  const pass = matchIndex >= 0;
  const message = pass ? () => `${(0, _jestMatcherUtils.matcherHint)('.not.toContainReactHtml', node.toString())}\n\n` + `Expected the React element:\n  ${(0, _jestMatcherUtils.RECEIVED_COLOR)(node.toString())}\n` + `Not to contain HTML:\n  ${(0, _jestMatcherUtils.printExpected)(text)}\n` + `But it did:\n  ${printReceivedWithHighlight(nodeHtml, matchIndex, text.length)}\n` : () => `${(0, _jestMatcherUtils.matcherHint)('.not.toContainReactHtml', node.toString())}\n\n` + `Expected the React element:\n  ${(0, _jestMatcherUtils.RECEIVED_COLOR)(node.toString())}\n` + `With HTML content:\n  ${(0, _jestMatcherUtils.printReceived)(nodeHtml)}\n` + `To contain HTML:\n  ${(0, _jestMatcherUtils.printExpected)(text)}\n`;
  return {
    pass,
    message
  };
}

function printReceivedWithHighlight(text, start, length) {
  return (0, _jestMatcherUtils.RECEIVED_COLOR)(`"${text.slice(0, start)}${(0, _jestMatcherUtils.INVERTED_COLOR)(text.slice(start, start + length))}${text.slice(start + length)}"`);
}