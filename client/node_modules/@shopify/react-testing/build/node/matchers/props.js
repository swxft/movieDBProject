"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveReactProps = toHaveReactProps;
exports.toHaveReactDataProps = toHaveReactDataProps;

var _jestMatcherUtils = require("jest-matcher-utils");

var _utilities = require("./utilities");

function toHaveReactProps(node, props) {
  (0, _utilities.assertIsNode)(node, {
    expectation: 'toHaveReactProps',
    isNot: this.isNot
  });

  if (props == null || typeof props !== 'object') {
    return {
      pass: false,
      message: () => `You passed ${props == null ? String(props) : `a ${typeof props}`} as props, but it must be an object.`
    };
  }

  const pass = Object.keys(props).every(key => this.equals(props[key], node.props[key]));
  const message = pass ? () => `${(0, _jestMatcherUtils.matcherHint)('.not.toHaveReactProps', node.toString())}\n\n` + `Expected the React element:\n  ${(0, _jestMatcherUtils.RECEIVED_COLOR)(node.toString())}\n` + `Not to have props:\n  ${(0, _jestMatcherUtils.printExpected)(props)}\n` + `Received:\n  ${(0, _jestMatcherUtils.printReceived)(node.props)}\n` : () => {
    const diffString = (0, _utilities.diffPropsForNode)(node, props, {
      expand: this.expand
    });
    return `${(0, _jestMatcherUtils.matcherHint)('.toHaveReactProps', node.toString())}\n\n` + `Expected the React element:\n  ${(0, _jestMatcherUtils.RECEIVED_COLOR)(node.toString())}\n` + `To have props:\n  ${(0, _jestMatcherUtils.printExpected)(props)}\n` + `Received:\n  ${(0, _jestMatcherUtils.printReceived)(node.props)}\n${diffString ? `Difference:\n${diffString}\n` : ''}`;
  };
  return {
    pass,
    message
  };
}

function toHaveReactDataProps(node, data) {
  return toHaveReactProps.call(this, node, data);
}