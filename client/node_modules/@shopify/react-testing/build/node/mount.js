"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mount = mount;
exports.createMount = createMount;
Object.defineProperty(exports, "Root", {
  enumerable: true,
  get: function () {
    return _root.Root;
  }
});
Object.defineProperty(exports, "Element", {
  enumerable: true,
  get: function () {
    return _element.Element;
  }
});
exports.CustomRoot = void 0;

var _root = require("./root");

var _element = require("./element");

function mount(element) {
  return new _root.Root(element);
}

class CustomRoot extends _root.Root {
  constructor(tree, context, options) {
    super(tree, options);
    this.context = context;
  }

}

exports.CustomRoot = CustomRoot;

function createMount({
  render,
  context: createContext = defaultContext,
  afterMount = defaultAfterMount
}) {
  function mount(element, options = {}) {
    const context = createContext(options);
    const wrapper = new CustomRoot(element, context, {
      render: element => render(element, context, options),
      resolveRoot: root => root.find(element.type)
    });
    const afterMountResult = afterMount(wrapper, options);
    return afterMountResult != null && 'then' in afterMountResult ? afterMountResult.then(() => wrapper) : wrapper;
  }

  Reflect.defineProperty(mount, 'extend', {
    writable: false,
    value: ({
      context: createAdditionalContext = defaultContext,
      render: additionalRender,
      afterMount: additionalAfterMount = defaultAfterMount
    }) => {
      return createMount({
        context: options => ({ ...createContext(options),
          ...createAdditionalContext(options)
        }),
        render: (element, context, options) => render(additionalRender(element, context, options), context, options),
        afterMount: (wrapper, options) => {
          const result = additionalAfterMount(wrapper, options);

          const finalResult = () => afterMount(wrapper, options);

          return result != null && 'then' in result ? result.then(finalResult) : finalResult();
        }
      });
    }
  });
  return mount;
}

function defaultContext() {
  return {};
}

function defaultAfterMount() {}