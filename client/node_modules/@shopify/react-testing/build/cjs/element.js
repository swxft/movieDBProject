"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Element = void 0;

var _toReactString = require("./toReactString");

var _types = require("./types");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Element = /*#__PURE__*/function () {
  _createClass(Element, [{
    key: "props",
    get: function get() {
      return this.tree.props;
    }
  }, {
    key: "type",
    get: function get() {
      return this.tree.type;
    }
  }, {
    key: "isDOM",
    get: function get() {
      return this.tree.tag === _types.Tag.HostComponent;
    }
  }, {
    key: "instance",
    get: function get() {
      return this.tree.instance;
    }
  }, {
    key: "children",
    get: function get() {
      return this.elementChildren;
    }
  }, {
    key: "descendants",
    get: function get() {
      return this.elementDescendants;
    }
  }, {
    key: "domNodes",
    get: function get() {
      if (this.isDOM) {
        return [this.instance];
      }

      return this.elementChildren.filter(function (element) {
        return element.isDOM;
      }).map(function (element) {
        return element.instance;
      });
    }
  }, {
    key: "domNode",
    get: function get() {
      var domNodes = this.domNodes;

      if (domNodes.length > 1) {
        throw new Error('You canâ€™t call getDOMNode() on an element that returns multiple HTML elements. Call getDOMNodes() to retrieve all of the elements instead.');
      }

      return domNodes[0] || null;
    }
  }]);

  function Element(tree, allChildren, allDescendants, root) {
    _classCallCheck(this, Element);

    this.tree = tree;
    this.allChildren = allChildren;
    this.root = root;
    this.elementChildren = void 0;
    this.elementDescendants = void 0;
    this.elementChildren = allChildren.filter(function (element) {
      return typeof element !== 'string';
    });
    this.elementDescendants = allDescendants.filter(function (element) {
      return typeof element !== 'string';
    });
  }

  _createClass(Element, [{
    key: "data",
    value: function data(key) {
      return this.props[key.startsWith('data-') ? key : "data-".concat(key)];
    }
  }, {
    key: "prop",
    value: function prop(key) {
      return this.props[key];
    }
  }, {
    key: "text",
    value: function text() {
      var instance = this.instance,
          allChildren = this.allChildren,
          tag = this.tree.tag;

      if (tag === _types.Tag.HostPortal) {
        return '';
      }

      if (instance instanceof HTMLElement) {
        return instance.textContent || '';
      }

      return allChildren.reduce(function (text, child) {
        return text + (typeof child === 'string' ? child : child.text());
      }, '');
    }
  }, {
    key: "html",
    value: function html() {
      var instance = this.instance,
          allChildren = this.allChildren,
          tag = this.tree.tag;

      if (tag === _types.Tag.HostPortal) {
        return '';
      }

      if (instance instanceof HTMLElement) {
        return instance.outerHTML;
      }

      return allChildren.reduce(function (text, child) {
        return text + (typeof child === 'string' ? child : child.html());
      }, '');
    }
  }, {
    key: "is",
    value: function is(type) {
      return isMatchingType(this.type, type);
    }
  }, {
    key: "find",
    value: function find(type, props) {
      return this.elementDescendants.find(function (element) {
        return isMatchingType(element.type, type) && (props == null || equalSubset(props, element.props));
      }) || null;
    }
  }, {
    key: "findAll",
    value: function findAll(type, props) {
      return this.elementDescendants.filter(function (element) {
        return isMatchingType(element.type, type) && (props == null || equalSubset(props, element.props));
      });
    }
  }, {
    key: "findWhere",
    value: function findWhere(predicate) {
      return this.elementDescendants.find(function (element) {
        return predicate(element);
      }) || null;
    }
  }, {
    key: "findAllWhere",
    value: function findAllWhere(predicate) {
      return this.elementDescendants.filter(function (element) {
        return predicate(element);
      });
    }
  }, {
    key: "trigger",
    value: function trigger(prop) {
      var _this = this;

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return this.root.act(function () {
        var propValue = _this.props[prop];

        if (propValue == null) {
          throw new Error("Attempted to call prop ".concat(prop, " but it was not defined."));
        }

        return propValue.apply(void 0, args);
      });
    }
  }, {
    key: "triggerKeypath",
    value: function triggerKeypath(keypath) {
      var _this2 = this;

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      return this.root.act(function () {
        var props = _this2.props;
        var parts = keypath.split(/[.[\]]/g).filter(Boolean);
        var currentProp = props;
        var currentKeypath = [];

        var _iterator = _createForOfIteratorHelper(parts),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var part = _step.value;

            if (currentProp == null || _typeof(currentProp) !== 'object') {
              throw new Error("Attempted to access field keypath '".concat(currentKeypath.join('.'), "', but it was not an object."));
            }

            currentProp = currentProp[part];
            currentKeypath.push(part);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        if (typeof currentProp !== 'function') {
          throw new Error("Value at keypath '".concat(keypath, "' is not a function."));
        }

        return currentProp.apply(void 0, args);
      });
    }
  }, {
    key: "debug",
    value: function debug(options) {
      return (0, _toReactString.toReactString)(this, options);
    }
  }, {
    key: "toString",
    value: function toString() {
      return "<".concat((0, _toReactString.nodeName)(this), " />");
    }
  }]);

  return Element;
}();

exports.Element = Element;

function isMatchingType(type, test) {
  if (type === test) {
    return true;
  }

  if (test == null) {
    return false;
  }

  return test.type != null && isMatchingType(type, test.type);
}

function equalSubset(subset, full) {
  return Object.keys(subset).every(function (key) {
    return key in full && full[key] === subset[key];
  });
}