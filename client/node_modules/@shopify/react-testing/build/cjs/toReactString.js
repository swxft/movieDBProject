"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toReactString = toReactString;
exports.toPropString = toPropString;
exports.nodeName = nodeName;

var _jestMatcherUtils = require("jest-matcher-utils");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function toReactString(node) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

  // if this is an array node then print all children at the current level
  if (!node.type && node.children.length > 0) {
    return node.children.map(function (child) {
      return toReactString(child, options, level);
    }).join('\n');
  }

  var name = nodeName(node);
  var indent = '  '.repeat(level);
  var props = Object.keys(node.props) // we always filter out children no matter what, but unless allProps option
  // is present we will also filter out insigificant props
  .filter(function (key) {
    return options.allProps ? key !== 'children' : !/^(children|className)$|^(aria|data)-/.test(key);
  }).reduce(function (list, key) {
    if (!key) {
      return list;
    }

    var value = node.props[key];

    if (value === undefined && !options.allProps) {
      return list;
    }

    list.push(toPropString(key, value, options.verbosity));
    return list;
  }, []);
  var hasChildren = node.children.length > 0 && !['svg'].includes(name);
  var open = "".concat(indent, "<").concat(name).concat(props.length > 0 ? " ".concat(props.join(' ')) : '').concat(hasChildren ? '>' : ' />');

  if (!hasChildren) {
    return open;
  }

  var close = "".concat(indent, "</").concat(name, ">");

  if (options.depth != null && level >= options.depth) {
    return [open, "".concat(indent, "  {/* <").concat(node.children.length, " child").concat(node.children.length === 1 ? '' : 'ren', "... /> */}"), close].join('\n');
  }

  return [open].concat(_toConsumableArray(node.children.map(function (child) {
    return toReactString(child, options, level + 1);
  })), [close]).join('\n');
}

function toPropString(key, value) {
  var verbosity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

  if (value === undefined) {
    return "".concat(key, "={undefined}");
  }

  if (value === null) {
    return "".concat(key, "={null}");
  }

  if (typeof value === 'string') {
    return "".concat(key, "=\"").concat(value, "\"");
  }

  if (typeof value === 'boolean' && value) {
    return value ? "".concat(key) : "".concat(key, "={false}");
  }

  if (value instanceof Array) {
    return "".concat(key, "={").concat((0, _jestMatcherUtils.stringify)(value, verbosity + 1), "}");
  }

  return "".concat(key, "={").concat((0, _jestMatcherUtils.stringify)(value, verbosity), "}");
}

function nodeName(_ref) {
  var type = _ref.type;

  if (type && _typeof(type) === 'object' && '_context' in type) {
    var context = type._context;
    return "".concat(context.displayName || 'Context', ".").concat(type === context.Provider ? 'Provider' : 'Consumer');
  }

  if (type == null) {
    return 'Node';
  }

  return typeof type === 'string' ? type : type.displayName || type.name || 'Component';
}