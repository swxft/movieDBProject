"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mount = mount;
exports.createMount = createMount;
Object.defineProperty(exports, "Root", {
  enumerable: true,
  get: function get() {
    return _root.Root;
  }
});
Object.defineProperty(exports, "Element", {
  enumerable: true,
  get: function get() {
    return _element.Element;
  }
});
exports.CustomRoot = void 0;

var _root = require("./root");

var _element = require("./element");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function mount(element) {
  return new _root.Root(element);
}

var CustomRoot = /*#__PURE__*/function (_Root) {
  _inherits(CustomRoot, _Root);

  var _super = _createSuper(CustomRoot);

  function CustomRoot(tree, context, options) {
    var _this;

    _classCallCheck(this, CustomRoot);

    _this = _super.call(this, tree, options);
    _this.context = context;
    return _this;
  }

  return CustomRoot;
}(_root.Root);

exports.CustomRoot = CustomRoot;

function createMount(_ref) {
  var render = _ref.render,
      _ref$context = _ref.context,
      createContext = _ref$context === void 0 ? defaultContext : _ref$context,
      _ref$afterMount = _ref.afterMount,
      afterMount = _ref$afterMount === void 0 ? defaultAfterMount : _ref$afterMount;

  function mount(element) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var context = createContext(options);
    var wrapper = new CustomRoot(element, context, {
      render: function (_render) {
        function render(_x) {
          return _render.apply(this, arguments);
        }

        render.toString = function () {
          return _render.toString();
        };

        return render;
      }(function (element) {
        return render(element, context, options);
      }),
      resolveRoot: function resolveRoot(root) {
        return root.find(element.type);
      }
    });
    var afterMountResult = afterMount(wrapper, options);
    return afterMountResult != null && 'then' in afterMountResult ? afterMountResult.then(function () {
      return wrapper;
    }) : wrapper;
  }

  Reflect.defineProperty(mount, 'extend', {
    writable: false,
    value: function value(_ref2) {
      var _ref2$context = _ref2.context,
          createAdditionalContext = _ref2$context === void 0 ? defaultContext : _ref2$context,
          additionalRender = _ref2.render,
          _ref2$afterMount = _ref2.afterMount,
          additionalAfterMount = _ref2$afterMount === void 0 ? defaultAfterMount : _ref2$afterMount;
      return createMount({
        context: function context(options) {
          return _objectSpread(_objectSpread({}, createContext(options)), createAdditionalContext(options));
        },
        render: function (_render2) {
          function render(_x2, _x3, _x4) {
            return _render2.apply(this, arguments);
          }

          render.toString = function () {
            return _render2.toString();
          };

          return render;
        }(function (element, context, options) {
          return render(additionalRender(element, context, options), context, options);
        }),
        afterMount: function (_afterMount) {
          function afterMount(_x5, _x6) {
            return _afterMount.apply(this, arguments);
          }

          afterMount.toString = function () {
            return _afterMount.toString();
          };

          return afterMount;
        }(function (wrapper, options) {
          var result = additionalAfterMount(wrapper, options);

          var finalResult = function finalResult() {
            return afterMount(wrapper, options);
          };

          return result != null && 'then' in result ? result.then(finalResult) : finalResult();
        })
      });
    }
  });
  return mount;
}

function defaultContext() {
  return {};
}

function defaultAfterMount() {}