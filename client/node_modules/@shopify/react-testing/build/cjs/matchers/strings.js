"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toContainReactText = toContainReactText;
exports.toContainReactHtml = toContainReactHtml;

var _jestMatcherUtils = require("jest-matcher-utils");

var _utilities = require("./utilities");

function toContainReactText(node, text) {
  (0, _utilities.assertIsNode)(node, {
    expectation: 'toContainReactText',
    isNot: this.isNot
  });
  var nodeText = node.text();
  var matchIndex = nodeText.indexOf(text);
  var pass = matchIndex >= 0;
  var message = pass ? function () {
    return "".concat((0, _jestMatcherUtils.matcherHint)('.not.toContainReactText', node.toString()), "\n\n") + "Expected the React element:\n  ".concat((0, _jestMatcherUtils.RECEIVED_COLOR)(node.toString()), "\n") + "Not to contain text:\n  ".concat((0, _jestMatcherUtils.printExpected)(text), "\n") + "But it did:\n  ".concat(printReceivedWithHighlight(nodeText, matchIndex, text.length), "\n");
  } : function () {
    return "".concat((0, _jestMatcherUtils.matcherHint)('.not.toContainReactText', node.toString()), "\n\n") + "Expected the React element:\n  ".concat((0, _jestMatcherUtils.RECEIVED_COLOR)(node.toString()), "\n") + "With text content:\n  ".concat((0, _jestMatcherUtils.printReceived)(nodeText), "\n") + "To contain string:\n  ".concat((0, _jestMatcherUtils.printExpected)(text), "\n");
  };
  return {
    pass: pass,
    message: message
  };
}

function toContainReactHtml(node, text) {
  (0, _utilities.assertIsNode)(node, {
    expectation: 'toContainReactHtml',
    isNot: this.isNot
  });
  var nodeHtml = node.html();
  var matchIndex = nodeHtml.indexOf(text);
  var pass = matchIndex >= 0;
  var message = pass ? function () {
    return "".concat((0, _jestMatcherUtils.matcherHint)('.not.toContainReactHtml', node.toString()), "\n\n") + "Expected the React element:\n  ".concat((0, _jestMatcherUtils.RECEIVED_COLOR)(node.toString()), "\n") + "Not to contain HTML:\n  ".concat((0, _jestMatcherUtils.printExpected)(text), "\n") + "But it did:\n  ".concat(printReceivedWithHighlight(nodeHtml, matchIndex, text.length), "\n");
  } : function () {
    return "".concat((0, _jestMatcherUtils.matcherHint)('.not.toContainReactHtml', node.toString()), "\n\n") + "Expected the React element:\n  ".concat((0, _jestMatcherUtils.RECEIVED_COLOR)(node.toString()), "\n") + "With HTML content:\n  ".concat((0, _jestMatcherUtils.printReceived)(nodeHtml), "\n") + "To contain HTML:\n  ".concat((0, _jestMatcherUtils.printExpected)(text), "\n");
  };
  return {
    pass: pass,
    message: message
  };
}

function printReceivedWithHighlight(text, start, length) {
  return (0, _jestMatcherUtils.RECEIVED_COLOR)("\"".concat(text.slice(0, start)).concat((0, _jestMatcherUtils.INVERTED_COLOR)(text.slice(start, start + length))).concat(text.slice(start + length), "\""));
}