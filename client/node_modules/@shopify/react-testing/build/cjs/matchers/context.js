"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toProvideReactContext = toProvideReactContext;

var _jestMatcherUtils = require("jest-matcher-utils");

var _utilities = require("./utilities");

function toProvideReactContext(node, Context, value) {
  var _this = this;

  (0, _utilities.assertIsNode)(node, {
    expectation: 'toProvideReactContext',
    isNot: this.isNot
  });
  var foundByType = node.findAll(Context.Provider);
  var foundByValue = value == null ? foundByType : foundByType.filter(function (element) {
    return _this.equals(value, element.prop('value'));
  });
  var pass = foundByValue.length > 0;
  var message = pass ? function () {
    return "".concat((0, _jestMatcherUtils.matcherHint)('.not.toProvideReactContext'), "\n\n") + "Expected the React element:\n  ".concat((0, _jestMatcherUtils.RECEIVED_COLOR)(node.toString()), "\n") + "Not to contain context provider:\n  ".concat((0, _jestMatcherUtils.EXPECTED_COLOR)((0, _utilities.printType)(Context.Provider)), "\n").concat(value ? "With value matching:\n  ".concat((0, _jestMatcherUtils.printExpected)(value), "\n") : '') + "But ".concat(foundByValue.length, " matching ").concat((0, _utilities.printType)(Context.Provider)).concat(foundByValue.length === 1 ? 's were' : ' was', " found.\n");
  } : function () {
    return "".concat("".concat((0, _jestMatcherUtils.matcherHint)('.toProvideReactContext'), "\n\n") + "Expected the React element:\n  ".concat((0, _jestMatcherUtils.RECEIVED_COLOR)(node.toString()), "\n") + "To contain context provider:\n  ".concat((0, _jestMatcherUtils.EXPECTED_COLOR)((0, _utilities.printType)(Context.Provider)), "\n").concat(value ? "With value matching:\n  ".concat((0, _jestMatcherUtils.printExpected)(value), "\n") : '')).concat(foundByType.length === 0 ? "But no matching ".concat((0, _utilities.printType)(Context.Provider), "s were found.\n") : "But the ".concat(foundByType.length === 1 ? 'found provider has' : 'found provider have', " had different values:\n\n").concat((0, _utilities.diffs)(foundByType, {
      value: value
    }, _this.expand)));
  };
  return {
    pass: pass,
    message: message
  };
}