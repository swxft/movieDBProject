"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toContainReactComponent = toContainReactComponent;
exports.toContainReactComponentTimes = toContainReactComponentTimes;

var _jestMatcherUtils = require("jest-matcher-utils");

var _utilities = require("./utilities");

function toContainReactComponent(node, type, props) {
  var _this = this;

  (0, _utilities.assertIsNode)(node, {
    expectation: 'toContainReactComponent',
    isNot: this.isNot
  });
  (0, _utilities.assertIsType)(type, {
    expectation: 'toContainReactComponent',
    isNot: this.isNot
  });
  var foundByType = node.findAll(type);
  var foundByProps = props == null ? foundByType : foundByType.filter(function (element) {
    return Object.keys(props).every(function (key) {
      return _this.equals(props[key], element.props[key]);
    });
  });
  var pass = foundByProps.length > 0;
  var message = pass ? function () {
    return "".concat((0, _jestMatcherUtils.matcherHint)('.not.toContainReactComponent'), "\n\n") + "Expected the React element:\n  ".concat((0, _jestMatcherUtils.RECEIVED_COLOR)(node.toString()), "\n") + "Not to contain component:\n  ".concat((0, _jestMatcherUtils.EXPECTED_COLOR)((0, _utilities.printType)(type)), "\n").concat(props ? "With props matching:\n  ".concat((0, _jestMatcherUtils.printExpected)(props), "\n") : '') + "But ".concat(foundByProps.length, " matching ").concat((0, _utilities.printType)(type), " ").concat(foundByProps.length === 1 ? 'elements were' : 'element was', " found.\n");
  } : function () {
    return "".concat("".concat((0, _jestMatcherUtils.matcherHint)('.toContainReactComponent'), "\n\n") + "Expected the React element:\n  ".concat((0, _jestMatcherUtils.RECEIVED_COLOR)(node.toString()), "\n") + "To contain component:\n  ".concat((0, _jestMatcherUtils.EXPECTED_COLOR)((0, _utilities.printType)(type)), "\n").concat(props ? "With props matching:\n  ".concat((0, _jestMatcherUtils.printExpected)(props), "\n") : '')).concat(foundByType.length === 0 ? "But no matching ".concat((0, _utilities.printType)(type), " elements were found.\n") : "But the ".concat(foundByType.length === 1 ? 'found element has' : 'found elements have', " the following prop differences:\n\n").concat((0, _utilities.diffs)(foundByType, props, _this.expand)));
  };
  return {
    pass: pass,
    message: message
  };
}

function toContainReactComponentTimes(node, type, times, props) {
  var _this2 = this;

  (0, _utilities.assertIsNode)(node, {
    expectation: 'toContainReactComponentTimes',
    isNot: this.isNot
  });
  (0, _utilities.assertIsType)(type, {
    expectation: 'toContainReactComponent',
    isNot: this.isNot
  });
  var foundByType = node.findAll(type);
  var foundByProps = props == null ? foundByType : foundByType.filter(function (element) {
    return Object.keys(props).every(function (key) {
      return _this2.equals(props[key], element.props[key]);
    });
  });
  var pass = foundByProps.length === times;
  var message = pass ? function () {
    return ["".concat((0, _jestMatcherUtils.matcherHint)('.not.toContainReactComponentTimes'), "\n"), "Expected the React element:\n  ".concat((0, _jestMatcherUtils.RECEIVED_COLOR)(node.toString())), "Not to contain component:\n  ".concat((0, _jestMatcherUtils.EXPECTED_COLOR)((0, _utilities.printType)(type))), "".concat(times, " ").concat((0, _utilities.pluralize)('time', times), ", but it did.")].join('\n');
  } : function () {
    return ["".concat((0, _jestMatcherUtils.matcherHint)('.toContainReactComponentTimes'), "\n"), "Expected the React element:\n  ".concat((0, _jestMatcherUtils.RECEIVED_COLOR)(node.toString())), "To contain component:\n  ".concat((0, _jestMatcherUtils.EXPECTED_COLOR)((0, _utilities.printType)(type))), "".concat(times, " ").concat((0, _utilities.pluralize)('time', times), ", but it was found ").concat(foundByProps.length, ".")].join('\n');
  };
  return {
    pass: pass,
    message: message
  };
}