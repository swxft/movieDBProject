"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Root = exports.connected = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactDom = require("react-dom");

var _testUtils = require("react-dom/test-utils");

var _TestWrapper = require("./TestWrapper");

var _element = require("./element");

var _types = require("./types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// eslint-disable-next-line @typescript-eslint/no-var-requires
var _require = require('react-reconciler/reflection'),
    findCurrentFiberUsingSlowPath = _require.findCurrentFiberUsingSlowPath;

var connected = new Set();
exports.connected = connected;

var Root = /*#__PURE__*/function () {
  _createClass(Root, [{
    key: "props",
    get: function get() {
      return this.withRoot(function (root) {
        return root.props;
      });
    }
  }, {
    key: "isDOM",
    get: function get() {
      return this.withRoot(function (root) {
        return root.isDOM;
      });
    }
  }, {
    key: "type",
    get: function get() {
      return this.withRoot(function (root) {
        return root.type;
      });
    }
  }, {
    key: "instance",
    get: function get() {
      return this.withRoot(function (root) {
        return root.instance;
      });
    }
  }, {
    key: "children",
    get: function get() {
      return this.withRoot(function (root) {
        return root.children;
      });
    }
  }, {
    key: "descendants",
    get: function get() {
      return this.withRoot(function (root) {
        return root.descendants;
      });
    }
  }, {
    key: "domNodes",
    get: function get() {
      return this.withRoot(function (root) {
        return root.domNodes;
      });
    }
  }, {
    key: "domNode",
    get: function get() {
      return this.withRoot(function (root) {
        return root.domNode;
      });
    }
  }, {
    key: "mounted",
    get: function get() {
      return this.wrapper != null;
    }
  }]);

  function Root(tree) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$render = _ref.render,
        render = _ref$render === void 0 ? defaultRender : _ref$render,
        _ref$resolveRoot = _ref.resolveRoot,
        resolveRoot = _ref$resolveRoot === void 0 ? defaultResolveRoot : _ref$resolveRoot;

    _classCallCheck(this, Root);

    this.tree = tree;
    this.wrapper = null;
    this.element = document.createElement('div');
    this.root = null;
    this.acting = false;
    this.render = void 0;
    this.resolveRoot = void 0;
    this.render = render;
    this.resolveRoot = resolveRoot;
    this.mount();
  }

  _createClass(Root, [{
    key: "act",
    value: function act(action) {
      var _this = this;

      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref2$update = _ref2.update,
          update = _ref2$update === void 0 ? true : _ref2$update;

      var updateWrapper = update ? this.update.bind(this) : noop;
      var result;

      if (this.acting) {
        return action();
      }

      this.acting = true;

      var afterResolve = function afterResolve() {
        updateWrapper();
        _this.acting = false;
        return result;
      };

      var promise = (0, _testUtils.act)(function () {
        result = action(); // This condition checks the returned value is an actual Promise and returns it
        // to Reactâ€™s `act()` call, otherwise we just want to return `undefined`

        if (isPromise(result)) {
          return result;
        }

        return undefined;
      });

      if (isPromise(result)) {
        updateWrapper();
        return Promise.resolve(promise).then(afterResolve);
      }

      return afterResolve();
    }
  }, {
    key: "html",
    value: function html() {
      return this.withRoot(function (root) {
        return root.html();
      });
    }
  }, {
    key: "text",
    value: function text() {
      return this.withRoot(function (root) {
        return root.text();
      });
    }
  }, {
    key: "is",
    value: function is(type) {
      return this.withRoot(function (root) {
        return root.is(type);
      });
    }
  }, {
    key: "prop",
    value: function prop(key) {
      return this.withRoot(function (root) {
        return root.prop(key);
      });
    }
  }, {
    key: "data",
    value: function data(key) {
      return this.withRoot(function (root) {
        return root.data(key);
      });
    }
  }, {
    key: "find",
    value: function find(type, props) {
      return this.withRoot(function (root) {
        return root.find(type, props);
      });
    }
  }, {
    key: "findAll",
    value: function findAll(type, props) {
      return this.withRoot(function (root) {
        return root.findAll(type, props);
      });
    }
  }, {
    key: "findWhere",
    value: function findWhere(predicate) {
      return this.withRoot(function (root) {
        return root.findWhere(predicate);
      });
    }
  }, {
    key: "findAllWhere",
    value: function findAllWhere(predicate) {
      return this.withRoot(function (root) {
        return root.findAllWhere(predicate);
      });
    }
  }, {
    key: "trigger",
    value: function trigger(prop) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return this.withRoot(function (root) {
        return root.trigger.apply(root, [prop].concat(_toConsumableArray(args)));
      });
    }
  }, {
    key: "triggerKeypath",
    value: function triggerKeypath(keypath) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      return this.withRoot(function (root) {
        return root.triggerKeypath.apply(root, [keypath].concat(args));
      });
    }
  }, {
    key: "mount",
    value: function mount() {
      var _this2 = this;

      if (this.mounted) {
        throw new Error('Attempted to mount a node that was already mounted');
      }

      if (this.element.parentNode == null) {
        document.body.appendChild(this.element);
        connected.add(this);
      }

      this.act(function () {
        (0, _reactDom.render)( /*#__PURE__*/_react["default"].createElement(_TestWrapper.TestWrapper, {
          render: _this2.render,
          ref: function ref(wrapper) {
            _this2.wrapper = wrapper;
          }
        }, _this2.tree), _this2.element);
      });
    }
  }, {
    key: "unmount",
    value: function unmount() {
      var _this3 = this;

      if (!this.mounted) {
        throw new Error('You attempted to unmount a node that was already unmounted');
      }

      this.ensureRoot();
      this.act(function () {
        return (0, _reactDom.unmountComponentAtNode)(_this3.element);
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var element = this.element,
          mounted = this.mounted;

      if (mounted) {
        this.unmount();
      }

      element.remove();
      connected["delete"](this);
    }
  }, {
    key: "setProps",
    value: function setProps(props) {
      var _this4 = this;

      this.ensureRoot();
      this.act(function () {
        return _this4.wrapper.setProps(props);
      });
    }
  }, {
    key: "forceUpdate",
    value: function forceUpdate() {
      var _this5 = this;

      this.ensureRoot();
      this.act(function () {
        return _this5.wrapper.forceUpdate();
      });
    }
  }, {
    key: "debug",
    value: function debug(options) {
      this.ensureRoot();
      return this.root.debug(options);
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.withRoot(function (root) {
        return root.toString();
      });
    }
  }, {
    key: "update",
    value: function update() {
      if (this.wrapper == null) {
        this.root = null;
      } else {
        var topElement = flatten(this.wrapper._reactInternalFiber, this)[0];
        this.root = this.resolveRoot(topElement);
      }
    }
  }, {
    key: "ensureRoot",
    value: function ensureRoot() {
      if (this.wrapper == null || this.root == null) {
        throw new Error('Attempted to operate on a mounted tree, but the component is no longer mounted');
      }
    }
  }, {
    key: "withRoot",
    value: function withRoot(_withRoot) {
      this.ensureRoot();
      return _withRoot(this.root);
    }
  }]);

  return Root;
}();

exports.Root = Root;

function defaultResolveRoot(element) {
  return element.children[0];
}

function defaultRender(element) {
  return element;
}

function flatten(element, root) {
  var node = findCurrentFiberUsingSlowPath(element);

  if (node.tag === _types.Tag.HostText) {
    return [node.memoizedProps];
  }

  var props = _objectSpread({}, node.memoizedProps || {});

  var _childrenToTree = childrenToTree(node.child, root),
      children = _childrenToTree.children,
      descendants = _childrenToTree.descendants;

  return [new _element.Element({
    tag: node.tag,
    type: node.type,
    props: props,
    instance: node.stateNode
  }, children, descendants, root)].concat(_toConsumableArray(descendants));
}

function childrenToTree(fiber, root) {
  var currentFiber = fiber;
  var children = [];
  var descendants = [];

  while (currentFiber != null) {
    var result = flatten(currentFiber, root);

    if (result.length > 0) {
      children.push(result[0]);
      descendants.push.apply(descendants, _toConsumableArray(result));
    }

    currentFiber = currentFiber.sibling;
  }

  return {
    children: children,
    descendants: descendants
  };
}

function isPromise(promise) {
  return promise != null && _typeof(promise) === 'object' && 'then' in promise;
}

function noop() {}