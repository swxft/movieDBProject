import { matcherHint, printReceived, printExpected, RECEIVED_COLOR as receivedColor, INVERTED_COLOR as invertedColor } from 'jest-matcher-utils';
import { assertIsNode } from './utilities';
export function toContainReactText(node, text) {
  assertIsNode(node, {
    expectation: 'toContainReactText',
    isNot: this.isNot
  });
  var nodeText = node.text();
  var matchIndex = nodeText.indexOf(text);
  var pass = matchIndex >= 0;
  var message = pass ? function () {
    return "".concat(matcherHint('.not.toContainReactText', node.toString()), "\n\n") + "Expected the React element:\n  ".concat(receivedColor(node.toString()), "\n") + "Not to contain text:\n  ".concat(printExpected(text), "\n") + "But it did:\n  ".concat(printReceivedWithHighlight(nodeText, matchIndex, text.length), "\n");
  } : function () {
    return "".concat(matcherHint('.not.toContainReactText', node.toString()), "\n\n") + "Expected the React element:\n  ".concat(receivedColor(node.toString()), "\n") + "With text content:\n  ".concat(printReceived(nodeText), "\n") + "To contain string:\n  ".concat(printExpected(text), "\n");
  };
  return {
    pass: pass,
    message: message
  };
}
export function toContainReactHtml(node, text) {
  assertIsNode(node, {
    expectation: 'toContainReactHtml',
    isNot: this.isNot
  });
  var nodeHtml = node.html();
  var matchIndex = nodeHtml.indexOf(text);
  var pass = matchIndex >= 0;
  var message = pass ? function () {
    return "".concat(matcherHint('.not.toContainReactHtml', node.toString()), "\n\n") + "Expected the React element:\n  ".concat(receivedColor(node.toString()), "\n") + "Not to contain HTML:\n  ".concat(printExpected(text), "\n") + "But it did:\n  ".concat(printReceivedWithHighlight(nodeHtml, matchIndex, text.length), "\n");
  } : function () {
    return "".concat(matcherHint('.not.toContainReactHtml', node.toString()), "\n\n") + "Expected the React element:\n  ".concat(receivedColor(node.toString()), "\n") + "With HTML content:\n  ".concat(printReceived(nodeHtml), "\n") + "To contain HTML:\n  ".concat(printExpected(text), "\n");
  };
  return {
    pass: pass,
    message: message
  };
}

function printReceivedWithHighlight(text, start, length) {
  return receivedColor("\"".concat(text.slice(0, start)).concat(invertedColor(text.slice(start, start + length))).concat(text.slice(start + length), "\""));
}