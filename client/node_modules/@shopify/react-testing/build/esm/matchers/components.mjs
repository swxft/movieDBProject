import { matcherHint, printExpected, EXPECTED_COLOR as expectedColor, RECEIVED_COLOR as receivedColor } from 'jest-matcher-utils';
import { assertIsNode, assertIsType, diffs, pluralize, printType } from './utilities';
export function toContainReactComponent(node, type, props) {
  var _this = this;

  assertIsNode(node, {
    expectation: 'toContainReactComponent',
    isNot: this.isNot
  });
  assertIsType(type, {
    expectation: 'toContainReactComponent',
    isNot: this.isNot
  });
  var foundByType = node.findAll(type);
  var foundByProps = props == null ? foundByType : foundByType.filter(function (element) {
    return Object.keys(props).every(function (key) {
      return _this.equals(props[key], element.props[key]);
    });
  });
  var pass = foundByProps.length > 0;
  var message = pass ? function () {
    return "".concat(matcherHint('.not.toContainReactComponent'), "\n\n") + "Expected the React element:\n  ".concat(receivedColor(node.toString()), "\n") + "Not to contain component:\n  ".concat(expectedColor(printType(type)), "\n").concat(props ? "With props matching:\n  ".concat(printExpected(props), "\n") : '') + "But ".concat(foundByProps.length, " matching ").concat(printType(type), " ").concat(foundByProps.length === 1 ? 'elements were' : 'element was', " found.\n");
  } : function () {
    return "".concat("".concat(matcherHint('.toContainReactComponent'), "\n\n") + "Expected the React element:\n  ".concat(receivedColor(node.toString()), "\n") + "To contain component:\n  ".concat(expectedColor(printType(type)), "\n").concat(props ? "With props matching:\n  ".concat(printExpected(props), "\n") : '')).concat(foundByType.length === 0 ? "But no matching ".concat(printType(type), " elements were found.\n") : "But the ".concat(foundByType.length === 1 ? 'found element has' : 'found elements have', " the following prop differences:\n\n").concat(diffs(foundByType, props, _this.expand)));
  };
  return {
    pass: pass,
    message: message
  };
}
export function toContainReactComponentTimes(node, type, times, props) {
  var _this2 = this;

  assertIsNode(node, {
    expectation: 'toContainReactComponentTimes',
    isNot: this.isNot
  });
  assertIsType(type, {
    expectation: 'toContainReactComponent',
    isNot: this.isNot
  });
  var foundByType = node.findAll(type);
  var foundByProps = props == null ? foundByType : foundByType.filter(function (element) {
    return Object.keys(props).every(function (key) {
      return _this2.equals(props[key], element.props[key]);
    });
  });
  var pass = foundByProps.length === times;
  var message = pass ? function () {
    return ["".concat(matcherHint('.not.toContainReactComponentTimes'), "\n"), "Expected the React element:\n  ".concat(receivedColor(node.toString())), "Not to contain component:\n  ".concat(expectedColor(printType(type))), "".concat(times, " ").concat(pluralize('time', times), ", but it did.")].join('\n');
  } : function () {
    return ["".concat(matcherHint('.toContainReactComponentTimes'), "\n"), "Expected the React element:\n  ".concat(receivedColor(node.toString())), "To contain component:\n  ".concat(expectedColor(printType(type))), "".concat(times, " ").concat(pluralize('time', times), ", but it was found ").concat(foundByProps.length, ".")].join('\n');
  };
  return {
    pass: pass,
    message: message
  };
}