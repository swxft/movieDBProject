"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_idle_1 = require("@shopify/react-idle");
var hooks_1 = require("../hooks");
var query_1 = require("./query");
function createAsyncQueryComponent(options) {
    var asyncQuery = query_1.createAsyncQuery(options);
    var resolver = asyncQuery.resolver, usePreload = asyncQuery.usePreload, usePrefetch = asyncQuery.usePrefetch, useKeepFresh = asyncQuery.useKeepFresh;
    function AsyncQuery(options) {
        var result = hooks_1.useQuery(asyncQuery, options);
        return options.children(result);
    }
    function Preload() {
        react_idle_1.useIdleCallback(usePreload());
        return null;
    }
    function Prefetch(options) {
        react_idle_1.useIdleCallback(usePrefetch(options));
        return null;
    }
    function KeepFresh(options) {
        react_idle_1.useIdleCallback(useKeepFresh(options));
        return null;
    }
    // Once we upgrade past TS 3.1, this will no longer be necessary,
    // because you can statically assign values to functions and TS
    // will know to augment its type
    var FinalComponent = AsyncQuery;
    Reflect.defineProperty(FinalComponent, 'resolver', {
        value: resolver,
        writable: false,
    });
    Reflect.defineProperty(FinalComponent, 'Preload', {
        value: Preload,
        writable: false,
    });
    Reflect.defineProperty(FinalComponent, 'Prefetch', {
        value: Prefetch,
        writable: false,
    });
    Reflect.defineProperty(FinalComponent, 'KeepFresh', {
        value: KeepFresh,
        writable: false,
    });
    Reflect.defineProperty(FinalComponent, 'usePreload', {
        value: usePreload,
        writable: false,
    });
    Reflect.defineProperty(FinalComponent, 'usePrefetch', {
        value: usePrefetch,
        writable: false,
    });
    Reflect.defineProperty(FinalComponent, 'useKeepFresh', {
        value: useKeepFresh,
        writable: false,
    });
    return FinalComponent;
}
exports.createAsyncQueryComponent = createAsyncQueryComponent;
