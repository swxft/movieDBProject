"use strict";
/* eslint react-hooks/rules-of-hooks: off */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = require("react");
var apollo_client_1 = require("apollo-client");
var react_effect_1 = require("@shopify/react-effect");
var apollo_client_2 = tslib_1.__importDefault(require("./apollo-client"));
var graphql_document_1 = tslib_1.__importDefault(require("./graphql-document"));
function useQuery(queryOrAsyncQuery) {
    var optionsPart = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        optionsPart[_i - 1] = arguments[_i];
    }
    var _a = tslib_1.__read(optionsPart, 1), _b = _a[0], options = _b === void 0 ? {} : _b;
    var _c = options.skip, skip = _c === void 0 ? false : _c, fetchPolicy = options.fetchPolicy, errorPolicy = options.errorPolicy, pollInterval = options.pollInterval, overrideClient = options.client, notifyOnNetworkStatusChange = options.notifyOnNetworkStatusChange, context = options.context, _d = options.ssr, ssr = _d === void 0 ? true : _d;
    var variables = options.variables || {};
    var client = apollo_client_2.default(overrideClient);
    if (typeof window === 'undefined' &&
        (skip || fetchPolicy === 'no-cache' || !ssr)) {
        return createDefaultResult(client, variables);
    }
    var query = graphql_document_1.default(queryOrAsyncQuery);
    var normalizedFetchPolicy = typeof window === 'undefined' &&
        (fetchPolicy === 'network-only' || fetchPolicy === 'cache-and-network')
        ? 'cache-first'
        : fetchPolicy;
    var serializedVariables = variables && JSON.stringify(variables);
    var watchQueryOptions = react_1.useMemo(function () {
        if (!query) {
            return null;
        }
        return {
            query: query,
            context: context,
            variables: variables,
            fetchPolicy: normalizedFetchPolicy,
            errorPolicy: errorPolicy,
            pollInterval: pollInterval,
            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        query,
        // eslint-disable-next-line react-hooks/exhaustive-deps
        context && JSON.stringify(context),
        serializedVariables,
        normalizedFetchPolicy,
        errorPolicy,
        pollInterval,
        notifyOnNetworkStatusChange,
    ]);
    var queryObservable = react_1.useMemo(function () {
        if (skip || !watchQueryOptions) {
            return;
        }
        return client.watchQuery(watchQueryOptions);
    }, [client, skip, watchQueryOptions]);
    react_effect_1.useServerEffect(function () {
        if (queryObservable == null) {
            return;
        }
        var result = queryObservable.getCurrentResult();
        return result.loading ? queryObservable.result() : undefined;
    });
    var defaultResult = react_1.useMemo(function () { return createDefaultResult(client, variables, queryObservable); }, 
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [queryObservable, client, serializedVariables]);
    var _e = tslib_1.__read(react_1.useState(0), 2), responseId = _e[0], setResponseId = _e[1];
    react_1.useEffect(function () {
        if (skip || !queryObservable) {
            return;
        }
        var invalidateCurrentResult = function () {
            setResponseId(function (x) { return x + 1; });
        };
        var subscription = queryObservable.subscribe(invalidateCurrentResult, invalidateCurrentResult);
        return function () {
            subscription.unsubscribe();
        };
    }, [skip, queryObservable]);
    var previousData = react_1.useRef(undefined);
    var currentResult = react_1.useMemo(function () {
        // must of the logic below are lifted from
        // https://github.com/apollographql/react-apollo/blob/22f8ebf52b26b348d6be905d5b7fbbfea51c1541/src/Query.tsx#L410-L477
        if (skip) {
            return defaultResult;
        }
        if (!queryObservable) {
            return tslib_1.__assign(tslib_1.__assign({}, defaultResult), { 
                // while documentNode is loading
                loading: true });
        }
        var result = queryObservable.getCurrentResult();
        var fetchPolicy = queryObservable.options.fetchPolicy;
        var hasError = result.errors && result.errors.length > 0;
        var data = result.data;
        if (result.loading) {
            data =
                previousData.current || (result && result.data)
                    ? tslib_1.__assign(tslib_1.__assign({}, (previousData.current || {})), ((result && result.data) || {})) : undefined;
        }
        else if (hasError) {
            data = (queryObservable.getLastResult() || {}).data;
        }
        else if (fetchPolicy === 'no-cache' &&
            (!result.data || Object.keys(result.data).length === 0)) {
            data = previousData.current;
        }
        else {
            previousData.current = result.data;
        }
        return tslib_1.__assign(tslib_1.__assign({}, defaultResult), { data: data, error: hasError
                ? new apollo_client_1.ApolloError({ graphQLErrors: result.errors })
                : result.error, networkStatus: result.networkStatus, loading: result.loading });
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [responseId, skip, queryObservable, defaultResult, previousData]);
    return currentResult;
}
exports.default = useQuery;
function createDefaultResult(client, variables, queryObservable) {
    return {
        data: undefined,
        error: undefined,
        networkStatus: undefined,
        loading: false,
        called: false,
        variables: (queryObservable ? queryObservable.variables : variables),
        refetch: queryObservable
            ? queryObservable.refetch.bind(queryObservable)
            : noop,
        fetchMore: queryObservable
            ? queryObservable.fetchMore.bind(queryObservable)
            : noop,
        updateQuery: queryObservable
            ? queryObservable.updateQuery.bind(queryObservable)
            : noop,
        startPolling: queryObservable
            ? queryObservable.startPolling.bind(queryObservable)
            : noop,
        stopPolling: queryObservable
            ? queryObservable.stopPolling.bind(queryObservable)
            : noop,
        subscribeToMore: queryObservable
            ? queryObservable.subscribeToMore.bind(queryObservable)
            : noop,
        client: client,
    };
}
function noop() { }
