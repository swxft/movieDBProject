import { DocumentNode as BaseDocumentNode, Source, ParseOptions } from 'graphql';
export interface GraphQLOperation<Data = {}, Variables = {}, DeepPartial = {}> {
    readonly __typeData?: Data;
    readonly __typeVariables?: Variables;
    readonly __typeDeepPartial?: DeepPartial;
}
export interface DocumentNode<Data = {}, Variables = {}, DeepPartial = {}> extends BaseDocumentNode, GraphQLOperation<Data, Variables, DeepPartial> {
}
export declare type GraphQLData<T> = T extends GraphQLOperation<infer Data, any, any> ? Data : never;
export declare type GraphQLVariables<T> = T extends GraphQLOperation<any, infer Variables, any> ? Variables : never;
export declare type GraphQLDeepPartial<T> = T extends GraphQLOperation<any, any, infer DeepPartial> ? DeepPartial : never;
export declare const parse: <Data = {}, Variables = {}, DeepPartial = {}>(source: string | Source, options?: ParseOptions) => DocumentNode<Data, Variables, DeepPartial>;
